import typing
from typing import Optional

import torch


class GaussianPrior:
    def __init__(self, dim: int, mean: float = 0.0, std: float = 1.0):
        """Sampler that samples from a Gaussian distribution with specified mean
            and variance.

        Args:
            dim (int): Output dimension of the sampler.
            mean (float, optional): Mean of Gaussian distribution.
                Defaults to 0.
            std (float, optional): Standard deviation of Gaussian distribution.
                Defaults to 1.
        """
        super().__init__()
        self.dim = dim
        self.mean = mean
        self.std = std
        self.num_qubits = dim

    @property
    def sample_size(self) -> typing.Tuple[int, ...]:
        """Returns the size of the samples generate by the model. This value does not include the batch dimension.

        Returns:
            Tuple[int, ...]: size of the samples generated by the model
        """
        return (self.dim,)
    
    def generate(
        self,
        n_samples: int,
        random_seed: Optional[int] = None,
        dtype: torch.dtype = torch.float32,
    ) -> torch.Tensor:
        """Get samples from the Gaussian sampler.
        Args:
            n_samples (int): Number of samples to get.
            random_seed (Optional[int], optional): Random seed to use.
                Defaults to None.
            dtype (torch.dtype): the dtype of the samples.
                Defaults to torch.float32.

        Returns:
            torch.Tensor: Samples with shape (n_samples, sampler_dimension).
        """
        if random_seed is not None:
            torch.manual_seed(random_seed)

        output_size = self.sample_size
        return torch.normal(
            self.mean, self.std, size=(n_samples, *output_size), dtype=dtype
        )

    def __repr__(self) -> str:
        return f"GaussianPrior(dim={self.dim}, mean={self.mean}, std={self.std})"
